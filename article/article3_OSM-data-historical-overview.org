#+TITLE: OSM data historical overview: what is the OSM API evolution through time?
#+AUTHOR: Damien Garaud <damien.garaud@oslandia.com>, RaphaÃ«l Delhome <raphael.delhome@oslandia.com>

# Common introduction for articles of the OSM-data-quality series
At [Oslandia](http://oslandia.com/), we like working with Open Source tool
projects and handling Open (geospatial) Data. In this article series, we will
play with the [OpenStreetMap](https://www.openstreetmap.org/) (/OSM/) map and
subsequent data. Here comes the third article of this series, dedicated to the
chronological overview of OSM data.

* How to get the data

** Build our own OSM data sample

:warning: to be checked !!!

First of all we have to recover a dataset. Two major solutions exist: either we
can dowload a regional area on [[http://download.geofabrik.de/][Geofabrik]] (/e.g./ a continent, a country, or
even a sub-region, like Aquitaine), or we can extract another area through a
bounding box drawn directly with OpenStreetMap [[https://www.openstreetmap.org/#map=10/45.0000/0.0000][API]] with [[http://osmcode.org/osmium-tool/][osmium]]-tool. Even if the
former solution is easier, we detail here the latter one in order to use a
smaller data set.

*Note*: =osmium-tool= is available as a package in the Debian GNU/Linux
distribution.

Let us work with a bounding box capture focused on Bordeaux, a medium-sized
French city. We use the following bounding box coordinates: the top-left corner
is at ={44.9335, -0.7179}= whilst the bottom-right corner is at ={44.7216,
-0.4134}=. These coordinates seem quite weird, however there are just hand-made,
by successive zooms in the OSM API.

#+CAPTION: Hand-made bounding box on Bordeaux city (France)
#+NAME: fig:osm-bb-example
[[./../figs/osm_boundingbox_example.png]]

They are integrated in the following JSON configuration file:

#+BEGIN_SRC js
  {
    "extracts": [
      {
        "output": "region-history.osh.pbf",
        "output_format": "osh.pbf",
        "description": "extract OSM history for a specific region",
        "bbox": {"left": -0.7179,
                 "right": -0.4134,
                 "top": 44.9335,
                 "bottom": 44.7216}
      }
    ],
    "directory": "/path/to/outputdir/"
  }
#+END_SRC

And this JSON file is used by osmium to build a standard /pbf/ file:

#+BEGIN_SRC shell
osmium extract --with-history --config=region.json latest-planet.osh.pbf
#+END_SRC

The =--with-history= flag is important. We want to study the temporal evolution
of some OSM entities, the number of contributions, and check some specific OSM
entities such as nodes, ways or relations and get their history. The only thing
to do is to set the output file name, let say it will be
=bordeaux-metropole.osh.pbf= in our case.

** Extract OSM data history

At this point, we have a /pbf/ file that contain every OSM element versions
through time. We still have to write them into a /csv/ file. Here we use
[[http://docs.osmcode.org/pyosmium/latest/index.html][pyosmium]] (see previous article).

This operation can be done through a simple Python file. First we have to
import the useful libraries, that are pandas (to handle dataframes and /csv/
files) and pyosmium. Then, we define a small OSM data handler, that saves every
nodes into the =elemtimeline= attribute (/i.e./ a list). This example is
limited to node for a sake of concision, however this class is easily
extensible to other OSM objects. We can observe that several node attributes
are recorded: the element type ("node" for nodes, of course!), ID, version in
the history, if it is currently visible on the API, timestamp (when the version
has been set), user ID, change set ID and the number of associated tags. These
attributes are also available for ways and relations, letting the chance to put
a little more abstract in this class definition!

#+BEGIN_SRC ipython :session osm :exports both                                   
  import pyosmium as osm
  import pandas as pd

  class TimelineHandler(osm.SimpleHandler):
      def __init__(self):
          osm.SimpleHandler.__init__(self)
          self.elemtimeline = []
      
      def node(self, n):
          self.elemtimeline.append(["node", 
                                    n.id, 
                                    n.version, 
                                    n.visible, 
                                    pd.Timestamp(n.timestamp), 
                                    n.uid, 
                                    n.changeset, 
                                    len(n.tags)])
#+END_SRC

An instance of this class can be created so as to save OSM nodes within the
bordeaux metropole area. We pass the input file name to the =apply_file=
procedure, that scans the input file and fills the handler list
accordingly. After that we just have to transform the list into a pandas
DataFrame, to make further treatments easier.

#+BEGIN_SRC ipython :session osm :exports both
  tlhandler = TimelineHandler()
  tlhandler.apply_file("bordeaux-metropole.osh.pbf")
  colnames = ['type', 'id', 'version', 'visible', 'ts', 'uid', 'chgset', 'ntags']
  elements = pd.DataFrame(tlhandler.elemtimeline, columns=colnames)
  elements = elements.sort_values(by=['type', 'id', 'ts'])
  elements.head(10)
#+END_SRC

#+RESULTS:
#+begin_example
#+end_example

With the help of pandas library, to save the file into /csv/ format is straightforward:
#+BEGIN_SRC ipython :session osm :exports both
  elements.to_csv("bordeaux-metropole.csv", date_format='%Y-%m-%d %H:%M:%S')
#+END_SRC

At this point, the OSM data history is available in a /csv/ file format, with a
whole set of attributes that will be useful to describe the data.

* How do the OSM API evolve through time?...

** Build the OSM historical evolution through a simple procedure...

We have a simple but seminal procedure called =datedelems= that allows us to
get the OSM API picture given a date. As a corollary we can build some time
series aiming to describe the evolution of the API in terms of OSM objects
(nodes, ways, relations) or users.

Subsection outline :

- present the procedures aiming at extracting the up-to-date elements
- generalization of this procedure to a date d
- extraction of the element number evolution

** Some object-focused insights of the OSM API evolution...

What is the temporal evolution of nodes, ways, relations?

Can we compare areas? (Hypothesis: some areas have been built faster than
others, *e.g.* compare a urban area and a desert area)

Subsection outline :

- temporal evolution of OSM elements on an example (bordeaux-metropole)
- comparison between several areas (bordeaux, aquitaine, rhone-alpes?)

** Some global considerations: how many active users?...

This is necessarily uncomplete if we consider only local extraction. However we
can try to obtain the change set and user statistics for full-planet dumps.

Subsection outline :

- temporal evolution of user and change set numbers on a typical area
- warning: it is not representative of global OSM contributions (-> case of change set dump)
